{
  "version": 3,
  "sources": ["../../../packages/components/badge/src/badge.ts", "../../../packages/components/badge/src/badge.vue", "../../../packages/components/badge/index.ts", "../../../packages/components/message/src/message.ts", "../../../packages/components/message/src/instance.ts", "../../../packages/components/message/src/message.vue", "../../../packages/components/config-provider/src/config-provider-props.ts", "../../../packages/components/config-provider/src/config-provider.ts", "../../../packages/components/message/src/method.ts", "../../../packages/components/message/index.ts"],
  "sourcesContent": ["import { buildProps, definePropType } from '@element-plus/utils'\n\nimport type {\n  ExtractPropTypes,\n  StyleValue,\n  __ExtractPublicPropTypes,\n} from 'vue'\n\nexport const badgeProps = buildProps({\n  /**\n   * @description display value.\n   */\n  value: {\n    type: [String, Number],\n    default: '',\n  },\n  /**\n   * @description maximum value, shows `{max}+` when exceeded. Only works if value is a number.\n   */\n  max: {\n    type: Number,\n    default: 99,\n  },\n  /**\n   * @description if a little dot is displayed.\n   */\n  isDot: Boolean,\n  /**\n   * @description hidden badge.\n   */\n  hidden: Boolean,\n  /**\n   * @description badge type.\n   */\n  type: {\n    type: String,\n    values: ['primary', 'success', 'warning', 'info', 'danger'],\n    default: 'danger',\n  },\n  /**\n   * @description whether to show badge when value is zero.\n   */\n  showZero: {\n    type: Boolean,\n    default: true,\n  },\n  /**\n   * @description customize dot background color\n   */\n  color: String,\n  /**\n   * @description CSS style of badge\n   */\n  badgeStyle: {\n    type: definePropType<StyleValue>([String, Object, Array]),\n  },\n  /**\n   * @description set offset of the badge\n   */\n  offset: {\n    type: definePropType<[number, number]>(Array),\n    default: [0, 0],\n  },\n  /**\n   * @description custom class name of badge\n   */\n  badgeClass: {\n    type: String,\n  },\n} as const)\nexport type BadgeProps = ExtractPropTypes<typeof badgeProps>\nexport type BadgePropsPublic = __ExtractPublicPropTypes<typeof badgeProps>\n", "<template>\n  <div :class=\"ns.b()\">\n    <slot />\n    <transition :name=\"`${ns.namespace.value}-zoom-in-center`\">\n      <sup\n        v-show=\"!hidden && (content || isDot || $slots.content)\"\n        :class=\"[\n          ns.e('content'),\n          ns.em('content', type),\n          ns.is('fixed', !!$slots.default),\n          ns.is('dot', isDot),\n          ns.is('hide-zero', !showZero && props.value === 0),\n          badgeClass,\n        ]\"\n        :style=\"style\"\n      >\n        <slot name=\"content\" :value=\"content\">\n          {{ content }}\n        </slot>\n      </sup>\n    </transition>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { addUnit, isNumber } from '@element-plus/utils'\nimport { badgeProps } from './badge'\n\nimport type { StyleValue } from 'vue'\n\ndefineOptions({\n  name: 'ElBadge',\n})\n\nconst props = defineProps(badgeProps)\n\nconst ns = useNamespace('badge')\n\nconst content = computed<string>(() => {\n  if (props.isDot) return ''\n  if (isNumber(props.value) && isNumber(props.max)) {\n    return props.max < props.value ? `${props.max}+` : `${props.value}`\n  }\n  return `${props.value}`\n})\n\nconst style = computed<StyleValue>(() => {\n  return [\n    {\n      backgroundColor: props.color,\n      marginRight: addUnit(-(props.offset?.[0] ?? 0)),\n      marginTop: addUnit(props.offset?.[1] ?? 0),\n    },\n    props.badgeStyle ?? {},\n  ]\n})\n\ndefineExpose({\n  /** @description badge content */\n  content,\n})\n</script>\n", "import { withInstall } from '@element-plus/utils'\nimport Badge from './src/badge.vue'\n\nimport type { SFCWithInstall } from '@element-plus/utils'\n\nexport const ElBadge: SFCWithInstall<typeof Badge> = withInstall(Badge)\nexport default ElBadge\n\nexport * from './src/badge'\nexport type { BadgeInstance } from './src/instance'\n", "import {\n  buildProps,\n  definePropType,\n  iconPropType,\n  isClient,\n  mutable,\n} from '@element-plus/utils'\n\nimport type {\n  AppContext,\n  ExtractPropTypes,\n  VNode,\n  __ExtractPublicPropTypes,\n} from 'vue'\nimport type { Mutable } from '@element-plus/utils'\nimport type MessageConstructor from './message.vue'\n\nexport const messageTypes = [\n  'primary',\n  'success',\n  'info',\n  'warning',\n  'error',\n] as const\n\nexport const messagePlacement = [\n  'top',\n  'top-left',\n  'top-right',\n  'bottom',\n  'bottom-left',\n  'bottom-right',\n] as const\n\nexport const MESSAGE_DEFAULT_PLACEMENT = 'top'\n\nexport type MessageType = typeof messageTypes[number]\nexport type MessagePlacement = typeof messagePlacement[number]\n/** @deprecated please use `MessageType` instead */\nexport type messageType = MessageType // will be removed in 3.0.0.\n\nexport interface MessageConfigContext {\n  max?: number\n  grouping?: boolean\n  duration?: number\n  offset?: number\n  showClose?: boolean\n  plain?: boolean\n  placement?: string\n}\n\nexport const messageDefaults = mutable({\n  customClass: '',\n  dangerouslyUseHTMLString: false,\n  duration: 3000,\n  icon: undefined,\n  id: '',\n  message: '',\n  onClose: undefined,\n  showClose: false,\n  type: 'info',\n  plain: false,\n  offset: 16,\n  placement: undefined,\n  zIndex: 0,\n  grouping: false,\n  repeatNum: 1,\n  appendTo: isClient ? document.body : (undefined as never),\n} as const)\n\nexport const messageProps = buildProps({\n  /**\n   * @description custom class name for Message\n   */\n  customClass: {\n    type: String,\n    default: messageDefaults.customClass,\n  },\n  /**\n   * @description whether `message` is treated as HTML string\n   */\n  dangerouslyUseHTMLString: {\n    type: Boolean,\n    default: messageDefaults.dangerouslyUseHTMLString,\n  },\n  /**\n   * @description display duration, millisecond. If set to 0, it will not turn off automatically\n   */\n  duration: {\n    type: Number,\n    default: messageDefaults.duration,\n  },\n  /**\n   * @description custom icon component, overrides `type`\n   */\n  icon: {\n    type: iconPropType,\n    default: messageDefaults.icon,\n  },\n  /**\n   * @description message dom id\n   */\n  id: {\n    type: String,\n    default: messageDefaults.id,\n  },\n  /**\n   * @description message text\n   */\n  message: {\n    type: definePropType<string | VNode | (() => VNode)>([\n      String,\n      Object,\n      Function,\n    ]),\n    default: messageDefaults.message,\n  },\n  /**\n   * @description callback function when closed with the message instance as the parameter\n   */\n  onClose: {\n    type: definePropType<() => void>(Function),\n    default: messageDefaults.onClose,\n  },\n  /**\n   * @description whether to show a close button\n   */\n  showClose: {\n    type: Boolean,\n    default: messageDefaults.showClose,\n  },\n  /**\n   * @description message type\n   */\n  type: {\n    type: String,\n    values: messageTypes,\n    default: messageDefaults.type,\n  },\n  /**\n   * @description whether message is plain\n   */\n  plain: {\n    type: Boolean,\n    default: messageDefaults.plain,\n  },\n  /**\n   * @description set the distance to the top of viewport\n   */\n  offset: {\n    type: Number,\n    default: messageDefaults.offset,\n  },\n  /**\n   * @description message placement position\n   */\n  placement: {\n    type: String,\n    values: messagePlacement,\n    default: messageDefaults.placement,\n  },\n  /**\n   * @description input box size\n   */\n  zIndex: {\n    type: Number,\n    default: messageDefaults.zIndex,\n  },\n  /**\n   * @description merge messages with the same content, type of VNode message is not supported\n   */\n  grouping: {\n    type: Boolean,\n    default: messageDefaults.grouping,\n  },\n  /**\n   * @description The number of repetitions, similar to badge, is used as the initial number when used with `grouping`\n   */\n  repeatNum: {\n    type: Number,\n    default: messageDefaults.repeatNum,\n  },\n} as const)\nexport type MessageProps = ExtractPropTypes<typeof messageProps>\nexport type MessagePropsPublic = __ExtractPublicPropTypes<typeof messageProps>\n\nexport const messageEmits = {\n  destroy: () => true,\n}\nexport type MessageEmits = typeof messageEmits\n\nexport type MessageInstance = InstanceType<typeof MessageConstructor> & unknown\n\nexport type MessageOptions = Partial<\n  Mutable<\n    Omit<MessageProps, 'id'> & {\n      appendTo?: HTMLElement | string\n    }\n  >\n>\nexport type MessageParams = MessageOptions | MessageOptions['message']\nexport type MessageParamsNormalized = Omit<MessageProps, 'id'> & {\n  /**\n   * @description set the root element for the message, default to `document.body`\n   */\n  appendTo: HTMLElement\n}\nexport type MessageOptionsWithType = Omit<MessageOptions, 'type'>\nexport type MessageParamsWithType =\n  | MessageOptionsWithType\n  | MessageOptions['message']\n\nexport interface MessageHandler {\n  /**\n   * @description close the Message\n   */\n  close: () => void\n}\n\nexport type MessageFn = {\n  (options?: MessageParams, appContext?: null | AppContext): MessageHandler\n  closeAll(type?: MessageType): void\n  closeAllByPlacement(position: MessagePlacement): void\n}\nexport type MessageTypedFn = (\n  options?: MessageParamsWithType,\n  appContext?: null | AppContext\n) => MessageHandler\n\nexport type Message = MessageFn & {\n  primary: MessageTypedFn\n  success: MessageTypedFn\n  warning: MessageTypedFn\n  info: MessageTypedFn\n  error: MessageTypedFn\n}\n", "import { shallowReactive } from 'vue'\n\nimport type { ComponentInternalInstance, VNode } from 'vue'\nimport type { Mutable } from '@element-plus/utils'\nimport type { MessageHandler, MessagePlacement, MessageProps } from './message'\n\nexport type MessageContext = {\n  id: string\n  vnode: VNode\n  handler: MessageHandler\n  vm: ComponentInternalInstance\n  props: Mutable<MessageProps>\n}\n\nexport const placementInstances = shallowReactive(\n  {} as Record<MessagePlacement, MessageContext[]>\n)\n\nexport const getOrCreatePlacementInstances = (placement: MessagePlacement) => {\n  if (!placementInstances[placement]) {\n    placementInstances[placement] = shallowReactive([])\n  }\n  return placementInstances[placement]\n}\n\nexport const getInstance = (id: string, placement: MessagePlacement) => {\n  const instances = placementInstances[placement] || []\n  const idx = instances.findIndex((instance) => instance.id === id)\n  const current = instances[idx]\n  let prev: MessageContext | undefined\n  if (idx > 0) {\n    prev = instances[idx - 1]\n  }\n  return { current, prev }\n}\n\nexport const getLastOffset = (\n  id: string,\n  placement: MessagePlacement\n): number => {\n  const { prev } = getInstance(id, placement)\n  if (!prev) return 0\n  return prev.vm.exposed!.bottom.value\n}\n\nexport const getOffsetOrSpace = (\n  id: string,\n  offset: number,\n  placement: MessagePlacement\n) => {\n  const instances = placementInstances[placement] || []\n  const idx = instances.findIndex((instance) => instance.id === id)\n  return idx > 0 ? 16 : offset\n}\n", "<template>\n  <transition\n    :name=\"ns.b('fade')\"\n    @before-enter=\"isStartTransition = true\"\n    @before-leave=\"onClose\"\n    @after-leave=\"$emit('destroy')\"\n  >\n    <div\n      v-show=\"visible\"\n      :id=\"id\"\n      ref=\"messageRef\"\n      :class=\"[\n        ns.b(),\n        { [ns.m(type)]: type },\n        ns.is('closable', showClose),\n        ns.is('plain', plain),\n        ns.is('bottom', verticalProperty === 'bottom'),\n        horizontalClass,\n        customClass,\n      ]\"\n      :style=\"customStyle\"\n      role=\"alert\"\n      @mouseenter=\"clearTimer\"\n      @mouseleave=\"startTimer\"\n    >\n      <el-badge\n        v-if=\"repeatNum > 1\"\n        :value=\"repeatNum\"\n        :type=\"badgeType\"\n        :class=\"ns.e('badge')\"\n      />\n      <el-icon v-if=\"iconComponent\" :class=\"[ns.e('icon'), typeClass]\">\n        <component :is=\"iconComponent\" />\n      </el-icon>\n      <slot>\n        <p v-if=\"!dangerouslyUseHTMLString\" :class=\"ns.e('content')\">\n          {{ message }}\n        </p>\n        <!-- Caution here, message could've been compromised, never use user's input as message -->\n        <p v-else :class=\"ns.e('content')\" v-html=\"message\" />\n      </slot>\n      <el-icon v-if=\"showClose\" :class=\"ns.e('closeBtn')\" @click.stop=\"close\">\n        <Close />\n      </el-icon>\n    </div>\n  </transition>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, nextTick, onMounted, ref, watch } from 'vue'\nimport { useEventListener, useResizeObserver, useTimeoutFn } from '@vueuse/core'\nimport { TypeComponents, TypeComponentsMap } from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport ElBadge from '@element-plus/components/badge'\nimport { useGlobalComponentSettings } from '@element-plus/components/config-provider'\nimport { ElIcon } from '@element-plus/components/icon'\nimport {\n  MESSAGE_DEFAULT_PLACEMENT,\n  messageEmits,\n  messageProps,\n} from './message'\nimport { getLastOffset, getOffsetOrSpace } from './instance'\n\nimport type { BadgeProps } from '@element-plus/components/badge'\nimport type { CSSProperties } from 'vue'\n\nconst { Close } = TypeComponents\n\ndefineOptions({\n  name: 'ElMessage',\n})\n\nconst props = defineProps(messageProps)\nconst emit = defineEmits(messageEmits)\n\nconst isStartTransition = ref(false)\n\nconst { ns, zIndex } = useGlobalComponentSettings('message')\nconst { currentZIndex, nextZIndex } = zIndex\n\nconst messageRef = ref<HTMLDivElement>()\nconst visible = ref(false)\nconst height = ref(0)\n\nlet stopTimer: (() => void) | undefined = undefined\n\nconst badgeType = computed<BadgeProps['type']>(() =>\n  props.type ? (props.type === 'error' ? 'danger' : props.type) : 'info'\n)\nconst typeClass = computed(() => {\n  const type = props.type\n  return { [ns.bm('icon', type)]: type && TypeComponentsMap[type] }\n})\nconst iconComponent = computed(\n  () => props.icon || TypeComponentsMap[props.type] || ''\n)\n\nconst placement = computed(() => props.placement || MESSAGE_DEFAULT_PLACEMENT)\n\nconst lastOffset = computed(() => getLastOffset(props.id, placement.value))\nconst offset = computed(() => {\n  return (\n    getOffsetOrSpace(props.id, props.offset, placement.value) + lastOffset.value\n  )\n})\nconst bottom = computed(() => height.value + offset.value)\nconst horizontalClass = computed(() => {\n  if (placement.value.includes('left')) return ns.is('left')\n  if (placement.value.includes('right')) return ns.is('right')\n  return ns.is('center')\n})\n\nconst verticalProperty = computed(() =>\n  placement.value.startsWith('top') ? 'top' : 'bottom'\n)\n\nconst customStyle = computed<CSSProperties>(() => ({\n  [verticalProperty.value]: `${offset.value}px`,\n  zIndex: currentZIndex.value,\n}))\n\nfunction startTimer() {\n  if (props.duration === 0) return\n  ;({ stop: stopTimer } = useTimeoutFn(() => {\n    close()\n  }, props.duration))\n}\n\nfunction clearTimer() {\n  stopTimer?.()\n}\n\nfunction close() {\n  visible.value = false\n\n  // if the message has never started a transition, we can destroy it immediately\n  nextTick(() => {\n    if (!isStartTransition.value) {\n      props.onClose?.()\n      emit('destroy')\n    }\n  })\n}\n\nfunction keydown({ code }: KeyboardEvent) {\n  if (code === EVENT_CODE.esc) {\n    // press esc to close the message\n    close()\n  }\n}\n\nonMounted(() => {\n  startTimer()\n  nextZIndex()\n  visible.value = true\n})\n\nwatch(\n  () => props.repeatNum,\n  () => {\n    clearTimer()\n    startTimer()\n  }\n)\n\nuseEventListener(document, 'keydown', keydown)\n\nuseResizeObserver(messageRef, () => {\n  height.value = messageRef.value!.getBoundingClientRect().height\n})\n\ndefineExpose({\n  visible,\n  bottom,\n  close,\n})\n</script>\n", "import { buildProps, definePropType } from '@element-plus/utils'\nimport { useEmptyValuesProps, useSizeProp } from '@element-plus/hooks'\n\nimport type { ExtractPropTypes, __ExtractPublicPropTypes } from 'vue'\nimport type { Language } from '@element-plus/locale'\nimport type { ButtonConfigContext } from '@element-plus/components/button'\nimport type { CardConfigContext } from '@element-plus/components/card'\nimport type { DialogConfigContext } from '@element-plus/components/dialog'\nimport type { MessageConfigContext } from '@element-plus/components/message'\nimport type { LinkConfigContext } from '@element-plus/components/link'\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport type ExperimentalFeatures = {\n  // TO BE Defined\n}\n\nexport const configProviderProps = buildProps({\n  /**\n   * @description Controlling if the users want a11y features\n   */\n  a11y: {\n    type: Boolean,\n    default: true,\n  },\n  /**\n   * @description Locale Object\n   */\n  locale: {\n    type: definePropType<Language>(Object),\n  },\n  /**\n   * @description global component size\n   */\n  size: useSizeProp,\n  /**\n   * @description button related configuration, [see the following table](https://element-plus.org/en-US/component/config-provider.html#button-attribute)\n   */\n  button: {\n    type: definePropType<ButtonConfigContext>(Object),\n  },\n  /**\n   * @description card related configuration, [see the following table](https://element-plus.org/en-US/component/config-provider.html#card-attribute)\n   */\n  card: {\n    type: definePropType<CardConfigContext>(Object),\n  },\n  /**\n   * @description dialog related configuration, [see the following table](https://element-plus.org/en-US/component/config-provider.html#dialog-attribute)\n   */\n  dialog: {\n    type: definePropType<DialogConfigContext>(Object),\n  },\n  /**\n   * @description link related configuration, [see the following table](https://element-plus.org/en-US/component/config-provider.html#link-attribute)\n   */\n  link: {\n    type: definePropType<LinkConfigContext>(Object),\n  },\n  /**\n   * @description features at experimental stage to be added, all features are default to be set to false, [see the following table](https://element-plus.org/en-US/component/config-provider.html#experimental-features)                                                                            | ^[object]\n   */\n  experimentalFeatures: {\n    type: definePropType<ExperimentalFeatures>(Object),\n  },\n  /**\n   * @description Controls if we should handle keyboard navigation\n   */\n  keyboardNavigation: {\n    type: Boolean,\n    default: true,\n  },\n  /**\n   * @description message related configuration, [see the following table](https://element-plus.org/en-US/component/config-provider.html#message-attribute)\n   */\n  message: {\n    type: definePropType<MessageConfigContext>(Object),\n  },\n  /**\n   * @description global Initial zIndex\n   */\n  zIndex: Number,\n  /**\n   * @description global component className prefix (cooperated with [$namespace](https://github.com/element-plus/element-plus/blob/dev/packages/theme-chalk/src/mixins/config.scss#L1)) | ^[string]\n   */\n  namespace: {\n    type: String,\n    default: 'el',\n  },\n  ...useEmptyValuesProps,\n} as const)\nexport type ConfigProviderProps = ExtractPropTypes<typeof configProviderProps>\nexport type ConfigProviderPropsPublic = __ExtractPublicPropTypes<\n  typeof configProviderProps\n>\n", "import { defineComponent, renderSlot, watch } from 'vue'\nimport { provideGlobalConfig } from './hooks/use-global-config'\nimport { configProviderProps } from './config-provider-props'\n\nimport type { MessageConfigContext } from '@element-plus/components/message'\n\nexport const messageConfig: MessageConfigContext = {\n  placement: 'top',\n}\n\nconst ConfigProvider = defineComponent({\n  name: 'ElConfigProvider',\n  props: configProviderProps,\n\n  setup(props, { slots }) {\n    const config = provideGlobalConfig(props)\n    watch(\n      () => props.message,\n      (val) => {\n        Object.assign(messageConfig, config?.value?.message ?? {}, val ?? {})\n      },\n      { immediate: true, deep: true }\n    )\n    return () => renderSlot(slots, 'default', { config: config?.value })\n  },\n})\nexport type ConfigProviderInstance = InstanceType<typeof ConfigProvider> &\n  unknown\n\nexport default ConfigProvider\n", "import { createVNode, isVNode, render } from 'vue'\nimport {\n  debugWarn,\n  hasOwn,\n  isBoolean,\n  isClient,\n  isElement,\n  isFunction,\n  isNumber,\n  isString,\n} from '@element-plus/utils'\nimport { messageConfig } from '@element-plus/components/config-provider'\nimport MessageConstructor from './message.vue'\nimport {\n  MESSAGE_DEFAULT_PLACEMENT,\n  messageDefaults,\n  messagePlacement,\n  messageTypes,\n} from './message'\nimport { getOrCreatePlacementInstances, placementInstances } from './instance'\n\nimport type { MessageContext } from './instance'\nimport type { AppContext } from 'vue'\nimport type {\n  Message,\n  MessageFn,\n  MessageHandler,\n  MessageOptions,\n  MessageParams,\n  MessageParamsNormalized,\n  MessagePlacement,\n  MessageType,\n} from './message'\n\nlet seed = 1\n\n// TODO: Since Notify.ts is basically the same like this file. So we could do some encapsulation against them to reduce code duplication.\n\nconst normalizeAppendTo = (normalized: MessageOptions) => {\n  const appendTo = normalized.appendTo\n  if (!appendTo) {\n    normalized.appendTo = document.body\n  } else if (isString(normalized.appendTo)) {\n    let appendTo = document.querySelector<HTMLElement>(normalized.appendTo)\n\n    // should fallback to default value with a warning\n    if (!isElement(appendTo)) {\n      debugWarn(\n        'ElMessage',\n        'the appendTo option is not an HTMLElement. Falling back to document.body.'\n      )\n      appendTo = document.body\n    }\n    normalized.appendTo = appendTo\n  }\n}\n\nconst normalizePlacement = (normalized: MessageOptions) => {\n  // if placement is not passed and global has config, use global config\n  if (\n    !normalized.placement &&\n    isString(messageConfig.placement) &&\n    messageConfig.placement\n  ) {\n    normalized.placement = messageConfig.placement as\n      | MessagePlacement\n      | undefined\n  }\n  // if placement is not passed and global has no config, use default config\n  if (!normalized.placement) {\n    normalized.placement = MESSAGE_DEFAULT_PLACEMENT\n  }\n  // if placement is not valid, use default config\n  if (!messagePlacement.includes(normalized.placement!)) {\n    debugWarn(\n      'ElMessage',\n      `Invalid placement: ${normalized.placement}. Falling back to '${MESSAGE_DEFAULT_PLACEMENT}'.`\n    )\n    normalized.placement = MESSAGE_DEFAULT_PLACEMENT\n  }\n}\n\nconst normalizeOptions = (params?: MessageParams) => {\n  const options: MessageOptions =\n    !params || isString(params) || isVNode(params) || isFunction(params)\n      ? { message: params }\n      : params\n\n  const normalized: MessageOptions = {\n    ...messageDefaults,\n    ...options,\n  }\n\n  normalizeAppendTo(normalized)\n  normalizePlacement(normalized)\n\n  // When grouping is configured globally,\n  // if grouping is manually set when calling message individually and it is not equal to the default value,\n  // the global configuration cannot override the current setting. default => false\n  if (isBoolean(messageConfig.grouping) && !normalized.grouping) {\n    normalized.grouping = messageConfig.grouping\n  }\n  if (isNumber(messageConfig.duration) && normalized.duration === 3000) {\n    normalized.duration = messageConfig.duration\n  }\n  if (isNumber(messageConfig.offset) && normalized.offset === 16) {\n    normalized.offset = messageConfig.offset\n  }\n  if (isBoolean(messageConfig.showClose) && !normalized.showClose) {\n    normalized.showClose = messageConfig.showClose\n  }\n  if (isBoolean(messageConfig.plain) && !normalized.plain) {\n    normalized.plain = messageConfig.plain\n  }\n\n  return normalized as MessageParamsNormalized\n}\n\nconst closeMessage = (instance: MessageContext) => {\n  const placement = instance.props.placement || MESSAGE_DEFAULT_PLACEMENT\n  const instances = placementInstances[placement]\n\n  const idx = instances.indexOf(instance)\n  if (idx === -1) return\n  instances.splice(idx, 1)\n  const { handler } = instance\n  handler.close()\n}\n\nconst createMessage = (\n  { appendTo, ...options }: MessageParamsNormalized,\n  context?: AppContext | null\n): MessageContext => {\n  const id = `message_${seed++}`\n  const userOnClose = options.onClose\n\n  const container = document.createElement('div')\n\n  const props = {\n    ...options,\n    // now the zIndex will be used inside the message.vue component instead of here.\n    // zIndex: nextIndex() + options.zIndex\n    id,\n    onClose: () => {\n      userOnClose?.()\n      closeMessage(instance)\n    },\n\n    // clean message element preventing mem leak\n    onDestroy: () => {\n      // since the element is destroy, then the VNode should be collected by GC as well\n      // we do not want cause any mem leak because we have returned vm as a reference to users\n      // so that we manually set it to false.\n      render(null, container)\n    },\n  }\n  const vnode = createVNode(\n    MessageConstructor,\n    props,\n    isFunction(props.message) || isVNode(props.message)\n      ? {\n          default: isFunction(props.message)\n            ? props.message\n            : () => props.message,\n        }\n      : null\n  )\n  vnode.appContext = context || message._context\n\n  render(vnode, container)\n  // instances will remove this item when close function gets called. So we do not need to worry about it.\n  appendTo.appendChild(container.firstElementChild!)\n\n  const vm = vnode.component!\n\n  const handler: MessageHandler = {\n    // instead of calling the onClose function directly, setting this value so that we can have the full lifecycle\n    // for out component, so that all closing steps will not be skipped.\n    close: () => {\n      vm.exposed!.close()\n    },\n  }\n\n  const instance: MessageContext = {\n    id,\n    vnode,\n    vm,\n    handler,\n    props: (vnode.component as any).props,\n  }\n\n  return instance\n}\n\nconst message: MessageFn &\n  Partial<Message> & { _context: AppContext | null } = (\n  options = {},\n  context\n) => {\n  if (!isClient) return { close: () => undefined }\n\n  const normalized = normalizeOptions(options)\n  const instances = getOrCreatePlacementInstances(\n    normalized.placement || MESSAGE_DEFAULT_PLACEMENT\n  )\n\n  if (normalized.grouping && instances.length) {\n    const instance = instances.find(\n      ({ vnode: vm }) => vm.props?.message === normalized.message\n    )\n    if (instance) {\n      instance.props.repeatNum += 1\n      instance.props.type = normalized.type\n      return instance.handler\n    }\n  }\n\n  if (isNumber(messageConfig.max) && instances.length >= messageConfig.max) {\n    return { close: () => undefined }\n  }\n\n  const instance = createMessage(normalized, context)\n\n  instances.push(instance)\n  return instance.handler\n}\n\nmessageTypes.forEach((type) => {\n  message[type] = (options = {}, appContext) => {\n    const normalized = normalizeOptions(options)\n    return message({ ...normalized, type }, appContext)\n  }\n})\n\nexport function closeAll(type?: MessageType): void {\n  for (const placement in placementInstances) {\n    if (hasOwn(placementInstances, placement)) {\n      // Create a copy of instances to avoid modification during iteration\n      const instances: MessageContext[] = [...placementInstances[placement]]\n      for (const instance of instances) {\n        if (!type || type === instance.props.type) {\n          instance.handler.close()\n        }\n      }\n    }\n  }\n}\n\nexport function closeAllByPlacement(placement: MessagePlacement) {\n  if (!placementInstances[placement]) return\n  // Create a copy of instances to avoid modification during iteration\n  const instances = [...placementInstances[placement]]\n  instances.forEach((instance) => instance.handler.close())\n}\n\nmessage.closeAll = closeAll\nmessage.closeAllByPlacement = closeAllByPlacement\nmessage._context = null\n\nexport default message as Message\n", "import { withInstallFunction } from '@element-plus/utils'\nimport Message from './src/method'\n\nexport const ElMessage = withInstallFunction(Message, '$message')\nexport default ElMessage\n\nexport * from './src/message'\n"],
  "mappings": "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",
  "names": ["_openBlock", "_createBlock", "_Transition", "_unref", "Message"]
}
